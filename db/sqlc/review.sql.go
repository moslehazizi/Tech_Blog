// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: review.sql

package db

import (
	"context"
)

const createReview = `-- name: CreateReview :one
INSERT INTO reviews (
  reviewer,
  review_content,
  post,
  star_degree
) VALUES (
  $1, $2, $3, $4
) RETURNING id, reviewer, review_content, post, star_degree, like_number, unlike_number, created_at
`

type CreateReviewParams struct {
	Reviewer      string  `json:"reviewer"`
	ReviewContent string  `json:"review_content"`
	Post          int64   `json:"post"`
	StarDegree    float64 `json:"star_degree"`
}

func (q *Queries) CreateReview(ctx context.Context, arg CreateReviewParams) (Review, error) {
	row := q.db.QueryRowContext(ctx, createReview,
		arg.Reviewer,
		arg.ReviewContent,
		arg.Post,
		arg.StarDegree,
	)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.Reviewer,
		&i.ReviewContent,
		&i.Post,
		&i.StarDegree,
		&i.LikeNumber,
		&i.UnlikeNumber,
		&i.CreatedAt,
	)
	return i, err
}

const deleteReview = `-- name: DeleteReview :exec
DELETE FROM reviews
WHERE id = $1
`

func (q *Queries) DeleteReview(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteReview, id)
	return err
}

const getReview = `-- name: GetReview :one
SELECT id, reviewer, review_content, post, star_degree, like_number, unlike_number, created_at FROM reviews
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetReview(ctx context.Context, id int64) (Review, error) {
	row := q.db.QueryRowContext(ctx, getReview, id)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.Reviewer,
		&i.ReviewContent,
		&i.Post,
		&i.StarDegree,
		&i.LikeNumber,
		&i.UnlikeNumber,
		&i.CreatedAt,
	)
	return i, err
}

const listReviews = `-- name: ListReviews :many
SELECT id, reviewer, review_content, post, star_degree, like_number, unlike_number, created_at FROM reviews
WHERE 
    post = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListReviewsParams struct {
	Post   int64 `json:"post"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListReviews(ctx context.Context, arg ListReviewsParams) ([]Review, error) {
	rows, err := q.db.QueryContext(ctx, listReviews, arg.Post, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Review{}
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ID,
			&i.Reviewer,
			&i.ReviewContent,
			&i.Post,
			&i.StarDegree,
			&i.LikeNumber,
			&i.UnlikeNumber,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
